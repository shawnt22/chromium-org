// Copyright 2025 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is generated from node_messages.h.tmpl and checked-in. Change this
// file by editing the template then running:
//
// node_messages.py --dir={path to *_messages_generator.h}

#ifndef {{prefix|header_guard}}
#define {{prefix|header_guard}}

#include <cstddef>
#include <cstdint>

#include "ipcz/driver_transport.h"
#include "ipcz/message.h"

// Headers for included types.
{% for header in includes %}
#include "{{header}}"
{% endfor %}

// clang-format off

namespace {{interface|namespace}} {

{% if interface == 'Node' %}
// Bump this version number up by 1 when adding new protocol features so that
// they can be detected during NodeLink establishment.
constexpr uint32_t kProtocolVersion = 0;
{% endif %}

#pragma pack(push, 1)

// Defines actual wire structures used to encode a message Foo. The main
// structure is Foo_Params, which consists first of a StructHeader, followed by
// a substructure for each defined version of the message. Version structures
// are concatenated in-order to form the full message at its latest known
// version, so a Foo with versions 0, 1, and 2 will have params laid out as:
//
//     struct Foo_Params {
//       internal::StructHeader header;
//       V0 v0;
//       V1 v1;
//       V2 v2;
//     };
//
// This is to say that V1 does not aggregate V0 and V2 does not aggregate V0 or
// V1. Each version structure contains only the fields added in that version.
//
// Macros in this header specifically emit declarations of each version struct's
// layout, as well as accessors for each version. In practice the whole output
// looks more like this, modulo some hidden utility methods and a sloppier
// arrangement because macros are macros:
//
//     struct Foo_Params {
//        struct V0 {
//          uint32_t some_field;
//          uint64_t some_other_field;
//        };
//
//        struct V1 {
//          uint32_t new_thing;
//        };
//
//        struct V2 {
//          uint64_t one_more_thing;
//          uint32_t and_another;
//        };
//
//        V0* v0() { return LargeEnoughForV0() ? &v0_ : nullptr; }
//        const V0* v0() const { return LargeEnoughForV0() ? &v0_ : nullptr; }
//
//        V1* v1() { return LargeEnoughForV1() ? &v1_ : nullptr; }
//        const V1* v1() const { return LargeEnoughForV1() ? &v1_ : nullptr; }
//
//        V2* v2() { return LargeEnoughForV2() ? &v2_ : nullptr; }
//        const V2* v2() const { return LargeEnoughForV2() ? &v2_ : nullptr; }
//
//        internal::StructHeader header;
//       private:
//        V0 v0_;
//        V1 v1_;
//        V2 v2_;
//      };
//
// Version structures are hidden behind pointer accessors because a validated
// message will always have its parameter payload mapped to this structure, and
// this structure represents the latest known version of the message layout. If
// If the message came from an older version however, memory beyond `v0_` may
// not actually belong to the structure and may not even be safe to address.
//
// Hiding versions >= 1 behind the above accessors ensures that versioned
// structures are used safely by the ipcz implementation.

{% for m in messages %}
struct IPCZ_ALIGN(8) {{m.message}}_Params {
  friend class {{m.message}}_Base;
  using TheseParams = {{m.message}}_Params;
  {{m.message}}_Params();
  ~{{m.message}}_Params();
  static constexpr uint8_t kId = {{m.msgid}};
  internal::StructHeader header;
{% for v in m.versions %}
  struct IPCZ_ALIGN(8) V{{v}} {
{% for f in m.v_fields(v) %}
{% if f.is_offset() %}
    uint32_t {{f.name}};
{% else %}
    {{f.type}} {{f.name}};
{% endif %}
{% endfor %}
  };
{% endfor %}
{# Version structs within Message are private fields accessed by getters. #}
{%  for v in m.versions %}

 private:
  V{{v}} v{{v}}_;
  static constexpr size_t v{{v}}_offset() { return offsetof(TheseParams, v{{v}}_); }
  static constexpr size_t v{{v}}_required_size() {
    return v{{v}}_offset() + sizeof(v{{v}}_);
  }
  bool LargeEnoughForV{{v}}version() const {
    return header.size >= v{{v}}_required_size();
  }

 public:
  V{{v}}* v{{v}}() { return LargeEnoughForV{{v}}version() ? &v{{v}}_ : nullptr; }
  const V{{v}}* v{{v}}() const { return LargeEnoughForV{{v}}version() ? &v{{v}}_ : nullptr; }
{% endfor %}
};

{% endfor %}

// This header is used to emit a Foo_Versions struct for each message Foo. The
// Foo_Versions struct contains parameter metadata for each defined version of a
// message. The structure looks something like this:
//
//     struct Foo_Versions {
//       using ParamsType = Foo_Params;
//
//       struct V0 {
//         using VersionParams = ParamsType::V0;
//         static constexpr internal::ParamMetadata kParams[] = {
//           {offsetof(VersionParams, field1), sizeof(VersionParams::field1),
//            ...},
//           {offsetof(VersionParams, field2), sizeof(VersionParams::field2),
//            ...},
//            ...etc.
//         };
//       };
//       struct V1 {
//         ...
//       };
//     };
//
// This structure is in turn used by message_base_declaration_macros.h to
// generated an aggregated array of version metadata that can be used at runtime
// for message validation.

// Validate enums start at 0 and finish at kMaxValue, and are size 1 or 4.
{% for m in messages %}
{% for v in m.versions %}
{% for f in m.v_fields(v) %}
{% if f.param_type() == 'kEnum' %}
static_assert(static_cast<uint32_t>({{f.type}}::kMinValue) == 0);
static_assert(sizeof({{f.type}}) == 1 || sizeof({{f.type}}) == 4);
{% endif %}
{% endfor %}
{% endfor %}
{% endfor %}

{% for m in messages %}
struct {{m.message}}_Versions {
  using ParamsType = {{m.message}}_Params;
{% for v in m.versions %}
  struct V{{v}} {
    static constexpr int kVersion = {{v}};
    using VersionParams = ParamsType::V{{v}};
    static constexpr internal::ParamMetadata kParams[] = {
{%  for f in m.v_fields(v) %}
{% if f.param_type() == 'kData' %}
        {offsetof(VersionParams, {{f.name}}), sizeof(VersionParams::{{f.name}}), 0,
         0, internal::ParamType::kData},
{% elif f.param_type() == 'kEnum' %}
        {offsetof(VersionParams, {{f.name}}), sizeof(VersionParams::{{f.name}}), 0,
         static_cast<uint32_t>({{f.type}}::kMaxValue), internal::ParamType::kEnum},
{% elif f.param_type() == 'kDataArray' %}
        {offsetof(VersionParams, {{f.name}}), sizeof(VersionParams::{{f.name}}),
         sizeof({{f.contains.type}}), 0, internal::ParamType::kDataArray},
{% elif f.param_type() == 'kDriverObject' %}
        {offsetof(VersionParams, {{f.name}}), sizeof(VersionParams::{{f.name}}), 0,
         0, internal::ParamType::kDriverObject},
{% elif f.param_type() == 'kDriverObjectArray' %}
        {offsetof(VersionParams, {{f.name}}), sizeof(VersionParams::{{f.name}}), 0,
         0, internal::ParamType::kDriverObjectArray},
{% else %}
// Not supported!
static_assert(false, "unknown param type in {{f.param_type()}}");
{% endif %}
{% endfor %}
    };
  };
{% endfor %}
};
{% endfor %}

// This header is used to emit a Foo_Base class declaration for each message
// Foo. The main purpose of Foo_Base is to define the list of version metadata
// for the Foo message, and to act as a base class for the generated Foo class
// (see message_declaration_macros.h) so that class can introspect its own
// version metadata. The version metadata cannot be defined by macros in that
// header, because that header already needs to emit accessor methods for each
// version.
{% for m in messages %}
class {{m.message}}_Base
    : public MessageWithParams<{{m.message}}_Params> {
 public:
  using ParamsType = {{m.message}}_Params;
  using VersionsType = {{m.message}}_Versions;
  static_assert(sizeof(ParamsType) % 8 == 0, "Invalid size");
  {{m.message}}_Base() = default;
  explicit {{m.message}}_Base(decltype(kIncoming))
      : MessageWithParams(kIncoming) {}
  ~{{m.message}}_Base() = default;
  static constexpr internal::VersionMetadata kVersions[] = {
{% for v in m.versions %}
      {VersionsType::V{{v}}::kVersion, ParamsType::v{{v}}_offset(),
       sizeof(ParamsType::V{{v}}), absl::MakeSpan(VersionsType::V{{v}}::kParams)},
{% endfor %}
  };
};
{% endfor %}

// This header emits the usable Foo class for each message Foo, which may be
// used directly by ipcz implementation. In particular this header is used to
// generate version struct accessors (v0, v1, etc.) which expose all available
// message parameters. See message_params_declaration_macros.h for their
// definitions.
{% for m in messages %}
class {{m.message}} : public {{m.message}}_Base {
 public:
  static constexpr uint8_t kId = {{m.msgid}};
  {{m.message}}();
  explicit {{m.message}}(decltype(kIncoming));
  ~{{m.message}}();
  bool Deserialize(const DriverTransport::RawMessage& message,
                   const DriverTransport& transport);
  bool DeserializeRelayed(absl::Span<const uint8_t> data,
                          absl::Span<DriverObject> objects);
{% for v in m.versions %}
  static_assert({{v}} < std::size(kVersions) && kVersions[{{v}}].version_number == {{v}},
                "Invalid version declaration(s). Message versions must be "
                "declared sequentially starting from 0.");

  ParamsType::V{{v}}* v{{v}}() { return params().v{{v}}(); }
  const ParamsType::V{{v}}* v{{v}}() const { return params().v{{v}}(); }
{% endfor %}
};

{% endfor %}

// Declares the BarMessageListener class for a given interface Bar. In ipcz
// message parlance an interface is a collection of related messages. This class
// routes a generic message dispatches to generated virtual methods named for
// the messages they receive. e.g. a DoStuff message is routed (based on message
// ID) to OnDoStuff().
//
// ipcz objects may override this interface to receive messages from some
// transport endpoint which they control. For example a NodeLink implements
// the Node interface (see node_messages.h and node_message_generator.h) by
// subclassing generated NodeMessageListener class and implementing all its
// methods.
//
// Note that listeners separate message receipt (OnMessage) from message
// dispatch (DispatchMessage). By default, OnMessage() simply forwards to
// DispatchMessage(), but the split allows subclasses to override this behavior,
// for example to defer dispatch in some cases.
//
// All raw transport messages are fully validated and deserialized before
// hitting OnMessage(), so implementations do not need to do any protocol-level
// validation of their own.

class {{interface}}MessageListener : public DriverTransport::Listener {
 public:
  virtual ~{{interface}}MessageListener() = default;
  virtual bool OnMessage(Message& message);

 protected:
  virtual bool DispatchMessage(Message& message);
{% for m in messages %}
  virtual bool On{{m.message}}({{m.message}}&) { return false; }
{% endfor %}
 private:
  bool OnTransportMessage(const DriverTransport::RawMessage& message,
                          const DriverTransport& transport,
                          IpczDriverHandle envelope) final;
  void OnTransportError() override {}
};

#pragma pack(pop)

}  // namespace {{interface|namespace}}

// clang-format on

#endif  // {{prefix|header_guard}}
