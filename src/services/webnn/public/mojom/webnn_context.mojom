// Copyright 2024 The Chromium Authors
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module webnn.mojom;

import "gpu/ipc/common/sync_token.mojom";
import "mojo/public/mojom/base/big_buffer.mojom";
import "services/webnn/public/mojom/features.mojom";
import "services/webnn/public/mojom/webnn_tensor.mojom";
import "services/webnn/public/mojom/webnn_error.mojom";
import "services/webnn/public/mojom/webnn_graph_builder.mojom";
import "third_party/blink/public/mojom/tokens/tokens.mojom";

// Represents a successful call to `WebNNContext::CreateTensor()`.
struct CreateTensorSuccess {
  pending_associated_remote<WebNNTensor> tensor_remote;
  // tensor_handle is a generated token used as a handle to identify the tensor
  // from the renderer. The token is only valid for the lifetime
  // of the tensor and is used by context operations in the service using the
  // tensor corresponding to this handle.
  blink.mojom.WebNNTensorToken tensor_handle;
};

// Represents the return value of `WebNNContext::CreateTensor()`. Let it be
// `success` if the tensor was successfully created and `error` otherwise.
union CreateTensorResult {
  CreateTensorSuccess success;
  Error error;
};

// Represents the `MLContext` object in the WebIDL definition that is a global
// state of neural network compute workload and execution processes. This
// interface runs in the GPU process and is called from the renderer process.
[RuntimeFeature=webnn.mojom.features.kWebMachineLearningNeuralNetwork]
interface WebNNContext {
  // Creates a connection to an `MLGraphBuilder` in the WebNN service.
  CreateGraphBuilder(pending_associated_receiver<WebNNGraphBuilder> receiver);

  // Called by the renderer process to create `WebNNTensor` message pipe for
  // creating platform specific tensors, the WebNN tensor will be validated and
  // created. This method guarantees memory allocation on the device.
  // Optionally, non-empty tensor data containing values to initialize contents.
  // Valid for tensor data to be empty when not being used as graph constants.
  CreateTensor(TensorInfo tensor_info, mojo_base.mojom.BigBuffer tensor_data)
    => (CreateTensorResult result);

  // Called by the renderer process to generate a verified SyncToken. The
  // token is released once all prior operations scheduled via
  // WebNNContextImpl—this includes WebNNContext and its associated interfaces—
  // have completed execution by the WebNN service.
  //
  // TODO(crbug.com/345352987): If the SyncPointGraphValidation feature is
  // enabled, consider removing this callback. In that case, the release ID can
  // be tracked directly from the renderer or converted to [Sync], since these
  // operations do not involve actual GPU execution.
  //
  // See docs/gpu/sync_token_internals.md for SyncToken explainer.
  GenVerifiedSyncToken() => (gpu.mojom.SyncToken release);

  // Called by the renderer process to wait for the verified SyncToken to be
  // released before performing further operations on this interface.
  // Intended to be invoked from another non-WebNN Mojo interface.
  // Implemented asynchronously by deferring WebNN execution until the fence
  // is released.
  WaitSyncToken(gpu.mojom.SyncToken fence);
};